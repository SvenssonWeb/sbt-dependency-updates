package org.jmotor.sbt.util

import org.scalatest.{ FunSpec, Matchers }
import sbt.ModuleID

class PluginParserSpec extends FunSpec with Matchers {

  describe("PluginParser") {
    it("reads normal plugin") {
      val lines =
        """
          |addSbtPlugin("org.jmotor.sbt" % "sbt-dependency-updates" % "1.1.0")
        """.stripMargin.split("\n")
      val found = PluginParser.parseline(lines).toList
      found shouldBe Seq(ModuleID("org.jmotor.sbt", "sbt-dependency-updates", "1.1.0"))
    }

    it("reads a few plugins with mixed content") {
      val lines =
        """
          | // comments
          |
          |addSbtPlugin("org.jmotor.sbt" % "sbt-dependency-updates" % "1.1.0")
          |
          |  addSbtPlugin("org.scalastyle" %% "scalastyle-sbt-plugin" % "1.0.0")
          |
        """.stripMargin.split("\n")

      val found = PluginParser.parseline(lines).toList
      found shouldBe Seq(
        ModuleID("org.jmotor.sbt", "sbt-dependency-updates", "1.1.0"),
        ModuleID("org.scalastyle", "scalastyle-sbt-plugin", "1.0.0"))
    }

    it("doesnt crash on the intellij plugin") {
      val lines =
        """
          |// Generated by IntelliJ-IDEA Scala plugin.
          |// Add settings when starting sbt from IDEA.
          |// Manual changes to this file will be lost.
          |if (java.lang.System.getProperty("idea.runid", "false") == "2017.2") scala.collection.Seq(
          |addSbtPlugin("org.jetbrains" % "sbt-structure-extractor" % "2017.2"),
          |addSbtPlugin("org.jetbrains" % "sbt-idea-shell" % "2017.2")
          |) else scala.collection.Seq.empty%
        """.stripMargin.split("\n")

      PluginParser.parseline(lines) shouldBe Seq(ModuleID("org.jetbrains", "sbt-idea-shell", "2017.2"))
    }
  }
}
